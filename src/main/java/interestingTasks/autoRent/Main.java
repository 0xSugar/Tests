package interestingTasks.autoRent;

import java.util.ArrayList;
import java.util.List;

/**
 * Прокат автотранспорта
 * Фирма по прокату автотранспорта предлагает на выбор 3 машины, мотоцикл и скутер.
 * Человек может прийти в прокат и взять какой-то транспорт на какой-то срок. Человек и срок на который берет генерируются рандомно.
 * Задача:
 * - сгенерировать N людей.
 * - вывести список всех людей и транспорт который брали на прокат
 * - а также время с - до которого брали на прокат
 * Дополнительная задача: один человек может взять на прокат больше одного раза, вывести всех людей которые брали напрокат
 *      больше одного раза (вывести человека и что он брал на прокат)
 * ================================================================================
 * ================================================================================
 *
 * Функциональность "с какого-то времени" не реализована, т.к. это бронь и как-то напряжно. Все стартует с
 * "сейчас" и на какой-то срок.
 *
 * Суть - есть компания, у неё есть транспорты. Есть люди, что арендуют транспорт (за так) и есть история,
 * что хранить историю аренд. Она есть как со стороны компании (все аренды), так и со стороны человека
 * (только то, что он арендовал). Логика - если транспорт есть - человек его берет за блокирует флажек,
 * если нету - ждет.. как покатался - отпускает флажек и так по кругу.. пока ему самому не надоест (20% шанс)
 * или пока Main не прервет его.
 *
 * Так же у данной программы есть недочеты... Даже если и нет свободного транспорта, нити все равно продолжают
 * бегать по кругу. Что бы этого не было - нужно сделать очерь, куда будут заноситься нити и по очереди получать
 * доступ. Получше алгоритм работы "Магазина" описан там же
 */
public class Main {
    private static int RANDOM_NUMBER_OF_PEOPLE = 7;
    private static List<Person> people = new ArrayList<>();

    public static void main(String[] args) throws InterruptedException {
        Company company = new Company("RunRent");           // создаем компанию

        for (int i = 0; i < RANDOM_NUMBER_OF_PEOPLE; i++) {
            people.add(new Person("Person_" + i, company)); // людей
        }

        people.forEach(Person::start);              // включаем "людей"
        Thread.sleep(15000);                        // ждем

        for (Person person : people) {
            person.interrupt();                         // останавливаем
            person.join();                              // дожидаемся
        }
                                                        // выводим
        System.out.println("=========================================\n");
        System.out.println("Вся статистика:");
        System.out.println(company);


        System.out.println("=========================================");
        System.out.println("Особая статистика по заданию. ");
        for (Person person : people) {
            if (person.getRentHistory().size() > 2) {
                System.out.println(person + ":");
                person.getRentHistory().forEach(x -> System.out.println("\t" + x));
            }
        }
    }
}
